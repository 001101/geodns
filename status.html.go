// +build !devel

package main

import (
	"bytes"
	"compress/gzip"
	"io"
)

// status_html returns raw, uncompressed file data.
func status_html() []byte {
	gz, err := gzip.NewReader(bytes.NewBuffer([]byte{
0x1f,0x8b,0x08,0x00,0x00,0x09,0x6e,0x88,0x00,0xff,0x9c,0x54,
0xc1,0x6e,0x1b,0x21,0x10,0x3d,0x9b,0xaf,0x40,0x2b,0xf5,0x68,
0x90,0x53,0xf9,0xd2,0x62,0x4e,0x8d,0x7a,0x4a,0xd4,0x34,0x52,
0x0f,0xbd,0xb1,0xcb,0x38,0x8b,0x8a,0xc1,0x82,0x71,0xad,0x14,
0xf9,0xdf,0x3b,0xac,0x77,0xe3,0xca,0xa9,0x22,0xc7,0x3e,0xac,
0xe1,0x31,0x6f,0xde,0xbc,0x59,0x66,0x55,0x8f,0x1b,0xaf,0x55,
0x0f,0xc6,0x6a,0x85,0x0e,0x3d,0xe8,0xaf,0x10,0xbf,0xdc,0x3f,
0xf2,0x52,0xb8,0xf8,0x01,0x29,0xbb,0x18,0xf8,0xe1,0xa0,0xe4,
0xf1,0x90,0x29,0xef,0xc2,0x2f,0xde,0x27,0x58,0xaf,0x1a,0x29,
0x03,0xa0,0x0d,0x46,0xb4,0x31,0x62,0xc6,0x64,0xb6,0x9d,0x0d,
0xa2,0x8b,0x1b,0x89,0x7b,0x87,0x08,0x69,0xfe,0x72,0x20,0x6f,
0xc4,0x47,0xb1,0x90,0x5d,0xce,0xf2,0x05,0x9b,0x53,0x64,0xeb,
0x02,0x58,0xb1,0x71,0x44,0xcb,0xb9,0xe1,0x09,0xfc,0xaa,0xc9,
0xf8,0xec,0x21,0xf7,0x00,0xd8,0x5c,0xaa,0x37,0x00,0x7b,0x83,
0x5d,0x3f,0x09,0x41,0xda,0x79,0x30,0xe1,0xa4,0xf6,0xa6,0xc8,
0xb0,0xd3,0x6c,0x86,0x56,0xfc,0x89,0x01,0x82,0xd9,0x00,0x2f,
0x7c,0x1d,0x03,0xce,0xf7,0xe0,0x9e,0x7a,0xfc,0xc4,0xdb,0xe8,
0xed,0x67,0xce,0x0f,0x4c,0xc9,0x31,0x5a,0xb5,0xd1,0x3e,0x6b,
0xc6,0x38,0xfd,0x94,0x75,0xbf,0x79,0xe7,0x4d,0xce,0xab,0xa6,
0x23,0x9a,0x21,0x5f,0x89,0x32,0x33,0xa6,0xfa,0x85,0xfe,0x49,
0x39,0xb3,0x92,0xb4,0x62,0x0a,0x4d,0xeb,0x61,0x0a,0x3d,0x6e,
0x86,0x27,0xf5,0x2a,0x59,0x48,0x60,0xc7,0x2d,0x65,0xb1,0x10,
0x32,0xd8,0x5a,0x1f,0xa6,0xfa,0xe8,0x35,0xbd,0x86,0xfe,0xb8,
0xba,0x23,0x73,0xfc,0xe1,0xdb,0xe3,0x09,0x59,0x70,0x72,0xb8,
0x43,0x38,0x21,0xcb,0x11,0xc9,0xff,0x04,0x9d,0x63,0xb2,0xa6,
0x66,0xa5,0x24,0x13,0x9e,0x80,0x73,0x31,0x94,0x4a,0x2f,0x9c,
0xb1,0x19,0xa9,0x4e,0x75,0xba,0xb0,0x8e,0x54,0xc7,0x8c,0x30,
0xcb,0xbb,0xe8,0xf3,0xd6,0x84,0xd5,0x72,0x3a,0x9d,0x5a,0xd6,
0x68,0xd5,0xea,0x52,0xc4,0x3d,0xad,0xeb,0x95,0x69,0x6b,0xbd,
0x96,0x68,0xa3,0xca,0x6c,0xf0,0x31,0x24,0xd1,0x0f,0x3b,0x48,
0x6e,0xa8,0xc2,0x4e,0x50,0x29,0xdb,0xe4,0x02,0xae,0x79,0xf3,
0x41,0xdc,0xac,0x1b,0x2e,0xee,0x00,0x93,0xeb,0xb2,0x18,0x63,
0xc5,0x77,0x83,0x50,0x7d,0x0f,0xd7,0xf1,0x7d,0xb4,0xc5,0x15,
0x9c,0xe5,0x35,0x3a,0x27,0xd2,0x7f,0x4c,0xdf,0xd6,0xc1,0x7a,
0x8f,0xf3,0x5b,0x1b,0xf2,0x95,0xee,0xcf,0xa9,0x97,0x76,0xe0,
0x9c,0x77,0x69,0x17,0x5e,0xe9,0xbd,0xea,0x44,0x29,0x10,0x6c,
0xbd,0x59,0xb4,0xaf,0x57,0x5c,0xd7,0x15,0xcd,0xcd,0xf0,0x7f,
0x9c,0x25,0x9a,0x91,0xfa,0x3d,0x62,0x7f,0x03,0x00,0x00,0xff,
0xff,0x0b,0x36,0x5f,0x2b,0x97,0x04,0x00,0x00,
	}))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var b bytes.Buffer
	io.Copy(&b, gz)
	gz.Close()

	return b.Bytes()
}